name: Train test split op
inputs:
- {name: input, type: CSV}
- {name: test_size, type: Float, default: '0.2', optional: true}
- {name: random_sate, type: Integer, default: '123', optional: true}
outputs:
- {name: output, type: JSON}
implementation:
  container:
    image: quay.io/ibm/kubeflow-notebook-image-ppc64le:latest
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas' 'scikit-learn' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install
      --quiet --no-warn-script-location 'pandas' 'scikit-learn' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def _make_parent_dirs_and_return_path(file_path: str):
          import os
          os.makedirs(os.path.dirname(file_path), exist_ok=True)
          return file_path

      def train_test_split_op(
          input_path,
          output_path,
          test_size = 0.2,
          random_sate = 123,
      ):

          import json
          import pandas as pd
          from pathlib import Path
          from sklearn.model_selection import train_test_split

          df = pd.read_csv(input_path)

          X, y = df.loc[:, df.columns != 'target'], df['target']

          X_temp, X_test, y_temp, y_test = \
              train_test_split(X, y, test_size=0.3, random_state=random_sate, stratify=y)

          X_train, X_valid, y_train, y_valid = \
              train_test_split(X_temp, y_temp, test_size=test_size, random_state=random_sate, stratify=y_temp)

          DATA = {
              'X_train': X_train.to_dict(),
              'X_valid': X_valid.to_dict(),
              'y_train': y_train.to_dict(),
              'y_valid': y_valid.to_dict()
          }

          json_data = json.dumps(DATA)

          Path(output_path).parent.mkdir(parents=True, exist_ok=True)
          with open(output_path, 'w') as f:
              f.write(json_data)

      import argparse
      _parser = argparse.ArgumentParser(prog='Train test split op', description='')
      _parser.add_argument("--input", dest="input_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--test-size", dest="test_size", type=float, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--random-sate", dest="random_sate", type=int, required=False, default=argparse.SUPPRESS)
      _parser.add_argument("--output", dest="output_path", type=_make_parent_dirs_and_return_path, required=True, default=argparse.SUPPRESS)
      _parsed_args = vars(_parser.parse_args())

      _outputs = train_test_split_op(**_parsed_args)
    args:
    - --input
    - {inputPath: input}
    - if:
        cond: {isPresent: test_size}
        then:
        - --test-size
        - {inputValue: test_size}
    - if:
        cond: {isPresent: random_sate}
        then:
        - --random-sate
        - {inputValue: random_sate}
    - --output
    - {outputPath: output}
